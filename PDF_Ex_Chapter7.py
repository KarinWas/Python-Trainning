import collections
import random

#Ex 7.1
def open_file(filename):
    file = open(filename, "r")
    for line in file:
        print(line)
    file.close()

#Ex 7.4
def data_generation(n, a, b, filename):
    file = open(filename, "w")
    randNumbers = []
    for index in range(n):
        randNumbers.append(random.randint(a,b))
    
    file.write(str(randNumbers)[1:-1])
    file.close()

def read_data(filename):
    file = open(filename, "r")
    return (file.read())

def sum_problem(fileA, fileB, k):
    A_list = [int(i) for i in list(read_data(fileA).split(","))]
    B_list = [int(i) for i in list(read_data(fileB).split(","))]
    d = {}
    for u in A_list:
        for v in B_list:
            if ( u + v == k):
                d[u] = v
    
    print ("elements from A file :" , str(list((d.keys()))))
    print ("elements from B file : " , str(list(d.values())))

def efficiency_sum_problem(fileA, fileB, k):
    A_list = [int(i) for i in list(read_data(fileA).split(","))]
    B_list = [int(i) for i in list(read_data(fileB).split(","))]
    count_A_list = [0] * k
    d = {}

    for value in A_list:
        if (value <= k):
            count_A_list[value] += 1

    for value in B_list:
        if (value <= k and count_A_list[k-value] != 0):
            d[k-value] = value

    print ("elements from A file :" , str(list((d.keys()))))
    print ("elements from B file : " , str(list(d.values())))

if __name__== "__main__":
    open_file("Test.txt")

    #7.2
    file = open("Shakespeare.txt", "r")
    count = collections.Counter()
    for word in file.read().split():
        count[word.lower()] +=1
    print("The most 20 common words are: " + str(list(dict(count.most_common(20)).keys())))
    print("The unique words are: " + str(list(dict(count).keys())))
    words_above_5_times = [w for w in count.keys() if count[w] >=5]
    print("Words that used at least 5 times: " + str(list(words_above_5_times)))

    fileToWrite = open("most_200_Common_words", "w")
    fileToWrite.write(str(count.most_common(200)))
    fileToWrite.close()

    data_generation(10, 1, 99, "FirstFile.txt")
    data_generation(10, 1, 99, "SecondFile.txt")
    print(read_data("Karin.txt"))
    sum_problem("FirstFile.txt", "SecondFile.txt", 85)

    data_generation(2000, 1, 10000, "Test1.txt")
    data_generation(2000, 1, 10000, "Test2.txt")
    sum_problem("Test1.txt", "Test2.txt", 5000)
    '''answer:
    elements from A file : [2850, 2346, 1012, 3769, 3141, 1616, 2590, 2717, 3922, 4732, 2162, 2516, 3519, 2915, 1057, 1239, 2970, 2369, 297, 346, 2378, 4992, 1689, 3573, 4386, 1506, 4875, 1715, 1787, 1979, 1953, 1709, 1212, 2167, 855, 2507, 1522, 3377, 4240, 4748, 2695, 4717, 1430, 578, 1180, 2753, 1109, 2545, 3517, 1967, 632, 886, 910, 4600, 3145, 3104, 2124, 3795, 3008, 1261, 1270, 3154, 3598, 3449, 2380, 3931, 838, 3523, 706, 4025, 274, 3966, 2145, 3400, 621, 1677, 1526, 2741, 2230, 2524, 1821, 3617, 2131, 4788, 217, 1172, 2146, 3388, 1478, 2355, 3246, 630, 1644, 3816, 1153, 1503, 66, 249, 4269, 1163, 4051, 2933, 4569, 3080, 2020, 1055, 3551, 1863, 4738, 3221, 766, 3911, 4030, 3387, 1896, 3692, 3209, 4858, 446, 1258, 69, 2263, 2945, 1745, 669, 1256, 3883, 3091, 224, 3768, 3248, 1452, 1815, 1844, 2691, 3463, 876, 1061, 2992, 4610, 3533, 622, 1673, 4693, 4735, 2780, 2687, 4108, 4041, 393, 631, 1736, 247, 1188]
    elements from B file :  [2150, 2654, 3988, 1231, 1859, 3384, 2410, 2283, 1078, 268, 2838, 2484, 1481, 2085, 3943, 3761, 2030, 2631, 4703, 4654, 2622, 8, 3311, 1427, 614, 3494, 125, 3285, 3213, 3021, 3047, 3291, 3788, 2833, 4145, 2493, 3478, 1623, 760, 252, 2305, 283, 3570, 4422, 3820, 2247, 3891, 2455, 1483, 3033, 4368, 4114, 4090, 400, 1855, 1896, 2876, 1205, 1992, 3739, 3730, 1846, 1402, 1551, 2620, 1069, 4162, 1477, 4294, 975, 4726, 1034, 2855, 1600, 4379, 3323, 3474, 2259, 2770, 2476, 3179, 1383, 2869,
    212, 4783, 3828, 2854, 1612, 3522, 2645, 1754, 4370, 3356, 1184, 3847, 3497, 4934, 4751, 731, 3837, 949, 2067, 431, 1920, 2980,
    3945, 1449, 3137, 262, 1779, 4234, 1089, 970, 1613, 3104, 1308, 1791, 142, 4554, 3742, 4931, 2737, 2055, 3255, 4331, 3744, 1117, 1909, 4776, 1232, 1752, 3548, 3185, 3156, 2309, 1537, 4124, 3939, 2008, 390, 1467, 4378, 3327, 307, 265, 2220, 2313, 892, 959,
    4607, 4369, 3264, 4753, 3812]
    '''
    sum_problem("Test1.txt", "Test2.txt", 12000)
    '''answer:
    elements from A file : [4324, 9110, 5956, 2167, 4095, 8753, 3112, 7703, 4657, 4622, 7773, 3717, 4975, 8868, 2240, 4757, 9852, 5364, 2976, 2408, 8894, 3162, 9023, 9891, 9151, 8911, 4448, 7366, 6794, 3020, 8674, 5713, 6905, 8976, 3591, 8382, 3051, 3793, 7208, 6941, 6400, 5549, 8198, 7293, 4229, 8763, 2568, 6764, 3013, 7306, 8995, 7504, 9870, 3377, 9413, 7442, 5865, 6176, 5546, 6635,
5446, 2129, 8081, 2320, 8450, 6390, 3060, 7202, 6659, 6724, 4447, 2661, 5053, 6931, 2623, 5103, 4771, 6633, 3181, 2494, 2457, 7068, 9206, 3519, 5223, 2305, 8043, 3681, 2893, 3884, 7477, 7620, 6951, 8075, 3572, 3426, 9537, 2992, 8965, 4876, 7240, 4820, 8385, 9899, 9096, 3647, 5562, 2835, 5087, 7169, 7327, 5076, 6541, 5319, 9487, 2261, 4878, 3721, 4488, 8561, 9851, 3101, 8914, 4175,
7280, 3766, 7526, 9190, 3188, 8901, 3032, 5435, 9250, 2295, 2149, 2493, 2940, 3128, 7086, 8705, 2654, 3981, 4864, 2665, 5071, 6642, 7448, 4243, 4645, 8398, 7474, 8749, 3050, 9104, 4366, 7871, 9602, 5385, 8790, 5302, 3403, 2563, 7904, 5320, 3585, 8038, 3208, 9265, 2323, 3773, 4151, 8810, 6366, 8623, 9773, 5239, 4687, 2696, 2525, 3322, 6645, 8840, 2697, 9981, 2438, 2730, 7753, 6766,
8853, 3409, 8566, 8803, 8989, 2923, 3703, 8560, 4074, 9076, 8003, 2011, 3087, 7154, 7090, 4349, 4203, 7042, 2779, 3960, 9624, 2794, 3496, 9027, 6001, 5036, 2618, 2653, 8888, 3115, 8525, 5875, 2516, 5928, 3975, 5965, 2421, 3988, 9959, 5545, 6580, 5307, 3473, 4731, 8742, 3444, 7008, 9500, 5728, 8626, 6264, 4251, 2247, 9918, 8683, 6237, 7976, 4437, 2964, 7837, 8838, 8456, 2718, 9822,
3794, 9204, 6987, 6417, 5122, 7595, 6615, 5773, 3094, 5424, 9352, 2309, 5360, 4414, 4315, 5356, 2780, 2110, 6183, 3715, 2996, 4551, 7264, 8083, 9731, 3131, 9214, 3926, 3118, 7157, 2912, 3437, 3634, 4989, 7816, 6448, 2622, 5475, 7305]
elements from B file :  [7676, 2890, 6044, 9833, 7905, 3247, 8888, 4297, 7343, 7378, 4227, 8283, 7025, 3132, 9760, 7243, 2148, 6636, 9024, 9592, 3106, 8838, 2977, 2109, 2849, 3089, 7552, 4634, 5206, 8980, 3326, 6287, 5095, 3024, 8409, 3618, 8949, 8207, 4792, 5059, 5600, 6451, 3802, 4707, 7771, 3237, 9432, 5236, 8987, 4694, 3005, 4496, 2130, 8623, 2587, 4558, 6135, 5824, 6454, 5365, 6554, 9871, 3919, 9680, 3550, 5610, 8940, 4798, 5341, 5276, 7553, 9339, 6947, 5069, 9377, 6897, 7229, 5367, 8819, 9506, 9543, 4932, 2794, 8481, 6777, 9695, 3957, 8319, 9107, 8116, 4523, 4380, 5049, 3925, 8428, 8574, 2463, 9008, 3035, 7124, 4760, 7180, 3615, 2101, 2904, 8353, 6438, 9165, 6913, 4831, 4673, 6924, 5459, 6681, 2513, 9739, 7122, 8279, 7512, 3439, 2149, 8899, 3086, 7825, 4720, 8234, 4474, 2810, 8812, 3099, 8968, 6565, 2750, 9705, 9851, 9507, 9060, 8872, 4914, 3295, 9346, 8019, 7136, 9335, 6929, 5358, 4552, 7757, 7355, 3602, 4526, 3251, 8950, 2896, 7634, 4129, 2398, 6615, 3210, 6698, 8597, 9437, 4096, 6680, 8415, 3962, 8792, 2735, 9677, 8227, 7849, 3190, 5634, 3377, 2227, 6761, 7313, 9304, 9475, 8678, 5355, 3160, 9303, 2019, 9562, 9270, 4247, 5234, 3147, 8591, 3434, 3197, 3011, 9077, 8297, 3440, 7926, 2924, 3997, 9989, 8913, 4846, 4910, 7651, 7797, 4958, 9221, 8040, 2376, 9206, 8504, 2973, 5999, 6964, 9382, 9347, 3112, 8885, 3475, 6125, 9484, 6072, 8025, 6035, 9579, 8012, 2041, 6455, 5420, 6693, 8527, 7269, 3258, 8556, 4992, 2500, 6272, 3374, 5736, 7749, 9753, 2082, 3317, 5763, 4024, 7563, 9036, 4163, 3162, 3544, 9282, 2178, 8206, 2796, 5013, 5583, 6878, 4405, 5385, 6227, 8906, 6576, 2648, 9691, 6640, 7586, 7685, 6644, 9220, 9890, 5817, 8285, 9004, 7449, 4736, 3917, 2269, 8869, 2786, 8074, 8882, 4843, 9088, 8563, 8366, 7011, 4184, 5552, 9378, 6525, 4695]
'''
    data_generation(10, 1, 30, "EfficiencyTest1.txt")
    data_generation(10, 1, 30, "EfficiencyTest2.txt")
    efficiency_sum_problem("EfficiencyTest1.txt", "EfficiencyTest2.txt", 20)
    

